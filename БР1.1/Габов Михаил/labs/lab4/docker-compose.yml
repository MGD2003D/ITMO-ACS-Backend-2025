services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - my-network

  postgres-db:
    image: postgres:16-alpine
    ports:
      - "5433:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    networks:
      - my-network

  auth-users-service:
    build:
      context: .
      dockerfile: ./services/auth-users/Dockerfile
    image: mgd2003d/auth-users-service
    env_file:
      - ./services/auth-users/.env
    ports:
      - "3001:3001"
    networks:
      - my-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_started

  recipes-service:
    build:
      context: .
      dockerfile: ./services/recipes/Dockerfile
    image: mgd2003d/recipes-service
    env_file:
      - ./services/recipes/.env
    ports:
      - "3002:3002"
    networks:
      - my-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_started

  interactions-service:
    build:
      context: .
      dockerfile: ./services/interactions/Dockerfile
    image: mgd2003d/interactions-service
    env_file:
      - ./services/interactions/.env
    ports:
      - "3003:3003"
    networks:
      - my-network
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres-db:
        condition: service_started

  api-gateway:
    build:
      context: .
      dockerfile: ./services/api-gateway/Dockerfile
    image: mgd2003d/api-gateway
    env_file:
      - ./services/api-gateway/.env
    ports:
      - "3000:3000"
    networks:
      - my-network
    depends_on:
      - auth-users-service
      - recipes-service
      - interactions-service

  notifications-service:
    build:
      context: .
      dockerfile: /services/notifications-service/Dockerfile
    image: mgd2003d/notifications-service
    env_file:
      - ./services/notifications-service/.env
    networks:
      - my-network
    depends_on:
      - rabbitmq
      - auth-users-service
      - recipes-service

networks:
  my-network:
    driver: bridge

volumes:
  rabbitmq-data:
  postgres-data: